// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewContract extends ethereum.Event {
  get params(): NewContract__Params {
    return new NewContract__Params(this);
  }
}

export class NewContract__Params {
  _event: NewContract;

  constructor(event: NewContract) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GenericFactory extends ethereum.SmartContract {
  static bind(address: Address): GenericFactory {
    return new GenericFactory("GenericFactory", address);
  }

  createContract(code: Bytes, salt: Bytes): Address {
    let result = super.call(
      "createContract",
      "createContract(bytes,bytes32):(address)",
      [ethereum.Value.fromBytes(code), ethereum.Value.fromFixedBytes(salt)]
    );

    return result[0].toAddress();
  }

  try_createContract(code: Bytes, salt: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createContract",
      "createContract(bytes,bytes32):(address)",
      [ethereum.Value.fromBytes(code), ethereum.Value.fromFixedBytes(salt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createContractAndCall(code: Bytes, salt: Bytes, call: Bytes): Address {
    let result = super.call(
      "createContractAndCall",
      "createContractAndCall(bytes,bytes32,bytes):(address)",
      [
        ethereum.Value.fromBytes(code),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(call)
      ]
    );

    return result[0].toAddress();
  }

  try_createContractAndCall(
    code: Bytes,
    salt: Bytes,
    call: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createContractAndCall",
      "createContractAndCall(bytes,bytes32,bytes):(address)",
      [
        ethereum.Value.fromBytes(code),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(call)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  predictAddress(code: Bytes, salt: Bytes): Address {
    let result = super.call(
      "predictAddress",
      "predictAddress(bytes,bytes32):(address)",
      [ethereum.Value.fromBytes(code), ethereum.Value.fromFixedBytes(salt)]
    );

    return result[0].toAddress();
  }

  try_predictAddress(code: Bytes, salt: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "predictAddress",
      "predictAddress(bytes,bytes32):(address)",
      [ethereum.Value.fromBytes(code), ethereum.Value.fromFixedBytes(salt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  predictAddressWithCall(code: Bytes, salt: Bytes, call: Bytes): Address {
    let result = super.call(
      "predictAddressWithCall",
      "predictAddressWithCall(bytes,bytes32,bytes):(address)",
      [
        ethereum.Value.fromBytes(code),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(call)
      ]
    );

    return result[0].toAddress();
  }

  try_predictAddressWithCall(
    code: Bytes,
    salt: Bytes,
    call: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "predictAddressWithCall",
      "predictAddressWithCall(bytes,bytes32,bytes):(address)",
      [
        ethereum.Value.fromBytes(code),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(call)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateContractCall extends ethereum.Call {
  get inputs(): CreateContractCall__Inputs {
    return new CreateContractCall__Inputs(this);
  }

  get outputs(): CreateContractCall__Outputs {
    return new CreateContractCall__Outputs(this);
  }
}

export class CreateContractCall__Inputs {
  _call: CreateContractCall;

  constructor(call: CreateContractCall) {
    this._call = call;
  }

  get code(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateContractCall__Outputs {
  _call: CreateContractCall;

  constructor(call: CreateContractCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateContractAndCallCall extends ethereum.Call {
  get inputs(): CreateContractAndCallCall__Inputs {
    return new CreateContractAndCallCall__Inputs(this);
  }

  get outputs(): CreateContractAndCallCall__Outputs {
    return new CreateContractAndCallCall__Outputs(this);
  }
}

export class CreateContractAndCallCall__Inputs {
  _call: CreateContractAndCallCall;

  constructor(call: CreateContractAndCallCall) {
    this._call = call;
  }

  get code(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get call(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateContractAndCallCall__Outputs {
  _call: CreateContractAndCallCall;

  constructor(call: CreateContractAndCallCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
